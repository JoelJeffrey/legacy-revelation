{
  "name": "draggabilly",
  "version": "1.2.1",
  "description": "make that shiz draggable",
  "main": "draggabilly.js",
  "dependencies": {
    "desandro-classie": "~1.0.1",
    "get-size": "~1.2.2",
    "desandro-get-style-property": "~1.0.4",
    "unidragger": "~1.1.0"
  },
  "devDependencies": {
    "gulp": "^3.8.11",
    "through2": "^0.6.3",
    "gulp-replace": "^0.5.3",
    "gulp-uglify": "^1.1.0",
    "requirejs": "^2.1.16",
    "gulp-jshint": "^1.9.2",
    "gulp-json-lint": "^0.1.0",
    "gulp-rename": "^1.2.0",
    "gulp-util": "^3.0.4"
  },
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/desandro/draggabilly.git"
  },
  "keywords": [
    "DOM",
    "drag",
    "draggable",
    "touch",
    "multitouch"
  ],
  "author": {
    "name": "David DeSandro"
  },
  "license": "MIT",
  "homepage": "http://draggabilly.desandro.com/",
  "readme": "# Draggabilly\n\n<p class=\"tagline\">Make that shiz draggable</p>\n\n[draggabilly.desandro.com](http://draggabilly.desandro.com)\n\nRad because it supports IE8+ and multi-touch.\n\n## Install\n\nGrab a packaged source file:\n\n+ [draggabilly.pkgd.min.js](http://draggabilly.desandro.com/draggabilly.pkgd.min.js) minified\n+ [draggabilly.pkgd.js](http://draggabilly.desandro.com/draggabilly.pkgd.js) un-minified\n\n### Package managers\n\nInstall with [Bower](http://bower.io): `bower install draggabilly`\n\nInstall with [npm](https://www.npmjs.com/package/draggabilly): `npm install draggabilly`\n\n### CDN\n\nLink directly to [Draggabilly files on cdnjs](https://cdnjs.com/libraries/draggabilly).\n\n``` html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/draggabilly/1.2.0/draggabilly.pkgd.min.js\"></script>\n<!-- or -->\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/draggabilly/1.2.0/draggabilly.pkgd.js\"></script>\n```\n\n## Usage\n\nInitialize Draggabilly as a jQuery plugin\n\n``` js\nvar $draggable = $('.draggable').draggabilly({\n  // options...\n})\n```\n\nInitialize Draggabilly with vanilla JS\n\n``` js\nvar elem = document.querySelector('.draggable');\nvar draggie = new Draggabilly( elem, {\n  // options...\n});\n\n// or pass in selector string as first argument\nvar draggie = new Draggabilly( '.draggable', {\n  // options...\n});\n\n// if you have multiple .draggable elements\n// get all draggie elements\nvar draggableElems = document.querySelectorAll('.draggable');\n// array of Draggabillies\nvar draggies = []\n// init Draggabillies\nfor ( var i=0, len = draggableElems.length; i < len; i++ ) {\n  var draggableElem = draggableElems[i];\n  var draggie = new Draggabilly( draggableElem, {\n    // options...\n  });\n  draggies.push( draggie );\n}\n```\n\n### Classes\n\n+ `.is-pointer-down` added when the user's pointer (mouse, touch, pointer) first presses down.\n+ `.is-dragging` added when elements starts to drag.\n\n## Options\n\n### axis\n\n**Type:** _String_\n\n**Values:** `'x'` or `'y'`\n\n``` js\naxis: 'x'\n```\n\nConstrains movement to horizontal or vertical axis.\n\n### containment\n\n**Type:** _Element_, Selector _String_, or _Boolean_\n\n``` js\ncontainment: '.container'\n```\n\nContains movement to the bounds of the element. If `true`, the container will be the parent element.\n\n### grid\n\n**Type:** _Array_\n\n**Values:** `[ x, y ]`\n\n``` js\ngrid: [ 20, 20 ]\n```\n\nSnaps the element to a grid, every x and y pixels.\n\n### handle\n\n**Type:** Selector _String_\n\n``` js\nhandle: '.handle'\n```\n\nSpecifies on what element the drag interaction starts.\n\n`handle` is useful for when you do not want all inner elements to be used for dragging, like inputs and forms. See [back handle example on CodePen](http://codepen.io/desandro/pen/znAuH).\n\n## Events\n\nBind events with jQuery with standard jQuery event methods `.on()`, `.off()`, and `.one()`. Inside jQuery event listeners `this` refers to the Draggabilly element.\n\n``` js\n// jQuery\nfunction listener(/* parameters */) {\n  // get Draggabilly instance\n  var draggie = $(this).data('draggabilly');\n  console.log( 'eventName happened', draggie.position.x, draggie.position.y );\n}\n// bind event listener\n$draggable.on( 'eventName', listener );\n// unbind event listener\n$draggable.off( 'eventName', listener );\n// bind event listener to trigger once. note ONE not ON\n$draggable.one( 'eventName', function() {\n  console.log('eventName happened just once');\n});\n```\n\nBind events with vanilla JS with `.on()`, `.off()`, and `.once()` methods. Inside vanilla JS event listeners `this` refers to the Draggabilly instance.\n\n``` js\n// vanilla JS\nfunction listener(/* parameters */) {\n  console.log( 'eventName happened', this.position.x, this.position.y );\n}\n// bind event listener\ndraggie.on( 'eventName', listener );\n// unbind event listener\ndraggie.off( 'eventName', listener );\n// bind event listener to trigger once. note ONCE not ONE or ON\ndraggie.once( 'eventName', function() {\n  console.log('eventName happened just once');\n});\n```\n\n### dragStart\n\nTriggered when dragging starts and the element starts moving. Dragging starts after the user's pointer has moved a couple pixels to allow for clicks.\n\n```js\n// jQuery\n$draggable.on( 'dragStart', function( event, pointer ) {...})\n// vanilla JS\ndraggie.on( 'dragStart', function( event, pointer ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mousedown` or `touchstart` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n### dragMove\n\nTriggered when dragging moves.\n\n```js\n// jQuery\n$draggable.on( 'dragMove', function( event, pointer, moveVector ) {...})\n// vanilla JS\ndraggie.on( 'dragMove', function( event, pointer, moveVector ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mousemove` or `touchmove` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n+ `moveVector` **Type:** _Object_ - How far the pointer has moved from its start position `{ x: 20, y: -30 }`\n\n### dragEnd\n\nTriggered when dragging ends.\n\n```js\n// jQuery\n$draggable.on( 'dragEnd', function( event, pointer ) {...})\n// vanilla JS\ndraggie.on( 'dragEnd', function( event, pointer ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mouseup` or `touchend` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n### pointerDown\n\nTriggered when the user's pointer (mouse, touch, pointer) presses down.\n\n```js\n// jQuery\n$draggable.on( 'pointerDown', function( event, pointer ) {...})\n// vanilla JS\ndraggie.on( 'pointerDown', function( event, pointer ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mousedown` or `touchstart` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n### pointerMove\n\nTriggered when the user's pointer moves.\n\n```js\n// jQuery\n$draggable.on( 'pointerMove', function( event, pointer, moveVector ) {...})\n// vanilla JS\ndraggie.on( 'pointerMove', function( event, pointer, moveVector ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mousemove` or `touchmove` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n+ `moveVector` **Type:** _Object_ - How far the pointer has moved from its start position `{ x: 20, y: -30 }`\n\n### pointerUp\n\nTriggered when the user's pointer unpresses.\n\n```js\n// jQuery\n$draggable.on( 'pointerUp', function( event, pointer ) {...})\n// vanilla JS\ndraggie.on( 'pointerUp', function( event, pointer ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mouseup` or `touchend` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n### staticClick\n\nTriggered when the user's pointer is pressed and unpressed and has not moved enough to start dragging.\n\n`click` events are hard to detect with draggable UI, as they are triggered whenever a user drags. Draggabilly's staticClick event resolves this, as it is triggered when the user has not dragged.\n\n```js\n// jQuery\n$draggable.on( 'staticClick', function( event, pointer ) {...})\n// vanilla JS\ndraggie.on( 'staticClick', function( event, pointer ) {...})\n```\n\n+ `event` - **Type:** _Event_ - the original `mouseup` or `touchend` event\n+ `pointer` - **Type:** _MouseEvent_ or _Touch_ - the event object that has `.pageX` and `.pageY`\n\n## Methods\n\n### disable\n\n``` js\n// jQuery\n$draggable.draggabilly('disable')\n// vanilla JS\ndraggie.disable()\n```\n\n### enable\n\n``` js\n// jQuery\n$draggable.draggabilly('enable')\n// vanilla JS\ndraggie.enable()\n```\n\n### destroy\n\n``` js\n// jQuery\n$draggable.draggabilly('destroy')\n// vanilla JS\ndraggie.destroy()\n```\n\n### jQuery.fn.data('draggabilly')\n\nGet the Draggabilly instance from a jQuery object. Draggabilly instances are useful to access Draggabilly properties.\n\n``` js\nvar draggie = $('.draggable').data('draggabilly')\n// access Draggabilly properties\nconsole.log( 'draggie at ' + draggie.position.x + ', ' + draggie.position.y )\n```\n\n## Properties\n\n### position\n\n`{ x: 20, y: -30 }`\n\n+ `x` _Integer_\n+ `y` _Integer_\n\n## RequireJS\n\nDraggabilly works with [RequireJS](http://requirejs.org).\n\nYou can require `draggabilly.pkgd.js`..\n\n``` js\nrequirejs( [\n  'path/to/draggabilly.pkgd.js',\n], function( Draggabilly ) {\n  new Draggabilly( ... );\n});\n```\n\nTo use Draggabilly as a jQuery plugin with RequireJS and draggabilly.pkgd.js, you need to call jQuery Bridget.\n\n``` js\n// require the require function\nrequirejs( [ 'require', 'jquery', 'path/to/draggabilly.pkgd.js' ],\n  function( require, $, Draggabilly ) {\n    // require jquery-bridget, it's included in draggabilly.pkgd.js\n    require( [ 'jquery-bridget/jquery.bridget' ],\n    function() {\n      // make Draggabilly a jQuery plugin\n      $.bridget( 'draggabilly', Draggabilly );\n      // now you can use $().draggabilly()\n      $('.draggable').draggabilly({...})\n    }\n  );\n});\n```\n\nOr, you can manage dependencies with [Bower](http://bower.io). Set `baseUrl` to `bower_components` and set a path config for all your application code.\n\n``` js\nrequirejs.config({\n  baseUrl: 'bower_components/',\n  paths: { // path your your app\n    app: '../'\n  }\n});\n\nrequirejs( [\n  'draggabilly/draggabilly',\n  'app/my-component.js'\n], function( Draggabilly, myComp ) {\n  new Draggabilly( '.draggable', {...});\n});\n```\n\nYou can require Bower dependencies and use Isotope as a jQuery plugin with jQuery Bridget.\n\n``` js\nrequirejs.config({\n  baseUrl: '../bower_components',\n  paths: {\n    jquery: 'jquery/jquery'\n  }\n});\n\nrequirejs( [\n    'jquery',\n    'draggabilly/draggabilly',\n    'jquery-bridget/jquery.bridget'\n  ],\n  function( $, Draggabilly ) {\n    // make Draggabilly a jQuery plugin\n    $.bridget( 'draggabilly', Draggabilly );\n    // now you can use $().draggabilly()\n    $('.draggable').draggabilly({...})\n});\n```\n\n## Browserify\n\nDraggabilly works with [Browserify](http://browserify.org/). Install [Draggabilly with npm](https://www.npmjs.com/package/draggabilly).\n\n```\nnpm install draggabilly\n```\n\n``` js\nvar Draggabilly = require('draggabilly');\n\nvar draggie = new Draggabilly( '.draggable', {\n  // options\n});\n```\n\nTo use Draggabilly as a jQuery plugin with Browserify, you need to call jQuery Bridget.\n\n```\nnpm install jquery-bridget\n```\n\n``` js\nvar $ = require('jquery');\nrequire('jquery-bridget');\nvar Draggabilly = require('draggabilly');\n\n// make Draggabilly a jQuery plugin\n$.bridget( 'draggabilly', Draggabilly );\n// now you can use $().draggabilly()\n$('.draggable').draggabilly({...})\n```\n\n## License\n\nDraggabilly is released under the [MIT License](http://desandro.mit-license.org/). Have at it.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/desandro/draggabilly/issues"
  },
  "_id": "draggabilly@1.2.1",
  "_shasum": "a70b484f58d887e346c71fc142c1035439cf0ca8",
  "_from": "draggabilly@^1.2.1",
  "_resolved": "https://registry.npmjs.org/draggabilly/-/draggabilly-1.2.1.tgz"
}
